@using Blazor_Bootstrap5_Compo.Sample.Client.ModelView
@using Blazor_Bootstrap5_Compo.Form
@using System.Text.RegularExpressions
@using System.Web
@page "/"

<EditForm Model="@view">
    <PageTitle>Bootstrap super compo can be used in EditForm (floating label and other stuff)</PageTitle>
    <div class="row">
        <div class="col">Input text with 2 ways binding (floating label)</div>
        <div class="col"><CustomInputText Id="compo1" Label="Input text" @bind-Value="view.ValueCompo1"></CustomInputText></div>
    </div>

    <div class="row">
        <div class="col">Date picker with vanilla-js calendar with 2 ways bindings (for forcing date str format)</div>
        <div class="col">
            <CustomInputDate @ref="CustomDatePicker" Id="compo2" Label="Date picker" @bind-Value="view.ValueCompo2"></CustomInputDate>
        </div>
    </div>

    <div class="row">
        <div class="col">Custom select two-ways binding (floating label)</div>
        <div class="col">
            <CustomInputSelect Id="select_test" Label="Custom select" Items="view.Collection"
                               TItem="ColObjectTest" @bind-Value="view.ValueCompo3" PropertyInnerTextName="Value" PropertyValueName="Id"></CustomInputSelect>
        </div>
    </div>

    <div class="row">
        <div class="col">Custom multiple checkbox (collection updated)</div>
        <div class="col">
            <CustomMultiCheckbox Id="multi_checkbox" Label="Multi checkbox"
                                 TItem="ColObjectTest" PropertyValueName="Id" PropertyLabelName="Value"
                                 PropertyIsCheckedName="IsChecked" Items="@view.Collection"></CustomMultiCheckbox>
        </div>
    </div>

    <div class="row">
        <div class="col">TextArea with 2 ways binding (floating label)</div>
        <div class="col"><CustomInputTextArea Id="compo5" Label="TextArea" @bind-Value="view.ValueCompo5"></CustomInputTextArea></div>
    </div>


    <div class="row">
        <div class="col text-center">TEST ZONE</div>
    </div>

    <div class="row mb-3 mt-5">
        <div class="col">Input text (2 ways-binding) :</div>
        <div class="col">
            <div>
                @view.ValueCompo1
            </div>
        </div>
    </div>
    <div class="row mb-3">
        <div class="col">Datepicker (2 ways-binding with JS updating value) :</div>
        <div class="col">
            <div>
                @view.ValueCompo2
            </div>
        </div>
    </div>

    <div class="row mb-3">
        <div class="col">Select box (Select selected Id (int) 2 ways binding) / <br /> Inject dynamic collection </div>
        <div class="col">
            <div>
                @view.ValueCompo3
            </div>
        </div>
    </div>
    <div class="row mb-3">
        <div class="col">MultiCheckbox (Collection is updated in parent view) : </div>
        <div class="col">
            <div>
                <button class="btn btn-primary" @onclick="OnClickShowUpdatedColValues">Show collection values</button>
                @RawCollectionData
            </div>
        </div>
    </div>
    <div class="row mb-3 mt-5">
        <div class="col">TextArea (2 ways-binding) :</div>
        <div class="col">
            <div>
                @((MarkupString)Regex.Replace(
                    HttpUtility.HtmlEncode(view.ValueCompo5), "\r?\n|\r", "<br />"))
            </div>
        </div>
    </div>

</EditForm>
@code
{
    View view = new();
    CustomInputDate? CustomDatePicker;
    string RawCollectionData = string.Empty;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        //Init JS calendar in guarantee date picker or it doesn't work (maybe will be better with .Net 7)
        if (CustomDatePicker is not null)
        {
            await CustomDatePicker.TriggerInitDatePicker();
        }
    }

    private void OnClickShowUpdatedColValues()
    {
        var tmp = view.Collection.Select(item => item.IsChecked);
        RawCollectionData = string.Empty;

        foreach(var s in tmp){
            RawCollectionData += s.ToString() + " - ";
        }
    }

}
